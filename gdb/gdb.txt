# compile c program gdb friendly: pass -g switch
$gcc -g -o app app.c

Stores symbol table in executable

# to invoke app
---------------
$gdb app 
or
$gdb
(gdb) file app
or
$gdb -q app 
or 
$gdb --quiet app

# gdb commands
--------------
help <command>
quit/q: 		quit the gdb session
run/r: 			run/start the program execution

breakpoints
-----------
(gdb) breakpoint/break/b <function name> or 
(gdb) breakpoint/break/b <line number> or
(gdb) break/b				# put the breakpoint at the current line
(gdb) break/b file.c:<function/Line>	# put the breakpoint if there are
										# multiple sources

# to list all functions
----------------------
(gdb) info functions

# to view source code at gdb prompt, displays 12 lines of source code.
# successive list will show next successive 12 lines and so on.
----------------------------------------------------------------------
(gdb) list
(gdb) list 1				# list from line 1
(gdb) list 4,8				# list between 4 and 8
(gdb) list <function name> 	# list function

# to list all breakpoints
------------------------
(gdb) info breakpoints

# debugging commands
-----------------------
# next/n		# after breakpoint, next executes next statement, if next
				# statement is function call then it will not step into 
				# function. To step into function use step command.
# finish		# finish execution of current function
# continue		# continue to next break point
# step/s

#nexti / ni		#
#stepi / si		# step in assembly instructions

# delete breakpoints
--------------------
delete 1		# delete breakpoint 1

# passing command line arguments 
--------------------------------
$ gdb --args app <arg1> <arg2>
or
$gdb app
(gdb) r <arg1> <arg2>
or
(gdb) run <arg1> <arg2>
or
(gdb) set args
(gdb) r

# backtrace: prints backtrace
-----------------------------
(gdb) backtrace/bt

# frame: select frame from backtrace
-------------------------------------
(gdb) list				# by default list shows the top frame, i.e. frame 0. if
						# you want to list some other frame, then you have to
						# switch to that frame "frame <frame number>"
(gdb) frame 3
(gdb) list 10
frame: 
A running application maintains a call stack that contains information about its
function that have been called. Each item in the stack is a call frame, and
each frame contains both the information needed to return to its caller and the
information needed to provide the local variables of the function. When program
starts, the call stack has only one frame, that of the function main. Each
function call pushes a new frame on to stack, and each function return removes
the frame for that function from the stack.

When you are in that frame, we can fetch all locals in that frame.
(gdb) info frame 0		# prints inst pointer, saved inst pointer, frame stack
						# location, argument list, locals, stack pointer

(gdb) info/i variables/v	# list all global and static variables
(gdb) info locals/l		# list local variable values of current stack frame
(gdb) info args/a			# list argument values of current stack frame
(gdb) info register/r		# list cpu register values


# to print value of variable
-----------------------------
(gdb) print/p <var name>
(gdb) p <var>				# prints value of <var>
(gdb) p &<var>				# prints address of <var>
(gdb) p sizeof(<var>)		# prints sizeof <var>
(gdb) p sizeof(&<var>)		# prints sizeof address of <var>
(gdb) help p
(gdb) p /FMT <var>
(gdb) p /x <var>			# print value in hexa decimal
(gdb) p /o <var>			# print value in octal
(gdb) p /t <var>			# print value in binary
/d							# decimal
/u							# unsigned decimal
/f							# float
/i							# instruction
/c							# char
/s							# string
/z							# hex, zero padded on the left

Size format:
-------------
/b							# byte
/h							# half word
/w							# word
/g							# giant, 8 bytes

Examine the memory
-------------------
(gdb) help x

(gdb) x &i
(gdb) x /d &i
(gdb) x /x &i
(gdb) x /4xb &i			# print 4 values in byte format
(gdb) x /s <var>		# print the string constant

ptype command
-------------
(gdb) ptype i						# prints type of variable
(gdb) ptype <function name> 		# prints function signature

modify the value of variable/string constants
--------------------------------------------
(gdb) set <var> = value
(gdb) set <string_const> = "new value"

Enter command: 
---------------
execute previous command

Conditional Breakpoint
----------------------
break [position] if expression				# set a breakpoint with condition
(gdb) b 

condition breakpoint_number [expression]	# set condition for already
											# configured breakpoint
(gdb) b 11 if i==400								# break when i==400
(gdb) condition 3 i==5							# breaks when i==5

write Watchpoints
-----------------
Watchpoints are set on variable, when those variables are written(not read), the
watch point is triggered and program execution stops.

(gdb) watch <variable>
(gdb) watch x			# to set watchpoint, that variable must be in a scope

(gdb) info b			# lists breakpoints as well as watchpoint

read watchpoint
--------------
(gdb) rwatch y

read/write watchpoint
---------------------
(gdb) awatch x

disbale/enable watchpoint
--------------------------
disable [watchpoint number]
enable  [watchpoint number]

gdb text user interface (TUI)
-----------------------------
Displays source code on top along with (gdb) prompt at bottom, just like GUI
interface. To refresh source screen press "ctrl + L"

$gdbtui

or

$ gdb --tui			

# enable tui from (gdb) prompt
(gdb) ctrl + xa

asm: listing in tui mode
------------------------
# make upper window display assembly
(gdb) layout asm
(gdb) ctrl + s 	#single key mode, where run, continue, up, down, finish are
abbreviated to single key
(gdb) display/i $pc  #this tells the gdb to disassemble current instruction just
before printing the prompt each time

# list cpu registers
--------------------
(gdb)layout regs

Logging
--------
By default gdb does not log, if you want to enable log what ever you perform on
gdb prompt in gdb.txt then execute. This is useful when there is a long stack
trace or a multi-threaded stack trace.
(gdb) set logging on			# enable logging
(gdb) set logging off			# disable logging
(gdb) set logging file file		# change the default logfile name

Attach gdb for already running process
--------------------------------------
$ gdb 
or
$ sudo gdb
(gdb) shell ps -ef | grep <app>			# execute shell command in (gdb) to know
										# pid of <app> process
(gdb) attach <pid>						# attach gdb to running process and
										# halts execution
(gdb) detach							# detach currently attached process

View assembly of C code
-----------------------
disassemble 'file.c'::<function name>
or
(gdb) disassemble <funuction name>


start command
-------------
start is combination of "b main + run"

(gdb) b main
(gdb) r
or
(gdb) start

command
-------
(gdb) b 14
Breakpoint 1 at ...
(gdb) command 1
Type commands for breakpoint 1, one per line.
End with a line saying just "end"
>p <var>
>end
(gdb) r				# whenever breakpoint executes it prints <var> value

Remote Debugging
----------------
# copy gdbserver from toolchain directory to target /bin/
# chmod +x /bin/gdbserver
# run following command on target
gdbserver 0.0.0.0:1234 --attach <pid>
gdbserver 0.0.0.0:1234 --attach 140		;attach to running process
gdbserver 0.0.0.0:1234 app_exe			;launch gdb session on process app_exe
# on host run
arm-linux-gnueabihf-gdb <a.out>			;a.out is mandatory, otherwise not able
to debug, it says "cannot find bounds of current function". May be it loads all
libc and dependent libraries by itself when we give a.out as an argument. If
argument is not specified, and load only binary through file from gdb prompt
then it fails and says above error message. Need to try all these.
# from gdb prompt, run following command to connect to target
target remote 192.168.1.30:1234
#
