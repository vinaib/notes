#commands for nxp bitbake project
DISTRO=fsl-imx-xwayland MACHINE=imx8mmevk source fsl-setup-release.sh -b build-xwayland 
bitbake fsl-image-validation-imx

#commands for bbb




# xz/unxz commands
unxz <filename.xz>	;to extract compressed file
or
xz --decompress <filename.xz>
or
tar -xf file.tar.xz

tar -cJf file.tar.xz folder
xz filename

Binary utilities
------------------
-> readelf	(cannot disassemble)
readelf -h a.out	#file header: elf header
readelf -l a.out	# program headers, section segments
readelf -S a.out	# all section headers, including their size, very useful,
					# same as objdump -h a.out
readelf -x .rodata a.out # dump the contents of rodata (in cannonical form)
readelf -p .rodata a.out # dump the content of rodata (in strings)

-> size
size -A a.out (sysv: very detailed format)
size -Ax a.out/vmlinux  : values in hex	
size -B a.out (berkley: short format, this is default if no option is given)

-> objdump
objdump -S a.out	#intermix source code with assembly
objdump -D a.out    #dumps assembly code, includes all files
objdump -hw a.out/vmlinux	# dumps all section headers
objdump -x a.out    # dumps all headers and its contents
objdump -d -j .rodata app	# disassemble only rodata segment
objdump -d -j .text app     # disassemble only text segment

-> hexdump
hexdump -e '/4 "%0X\n"' kernel.img

--------------------------------------------------------------------------------
VI commands:
--------------------------------------------------------------------------------
1) Repeating characters in VIM insert node: Like insert 20 dashes.
ctrl + o, 20, i, -, esc

--------------------------------
2) select vertical: visual block
--------------------------------
in escape mode: press "^v" enables visual block and 
press delete - to delete text
y to copy text
p to paste text

Proc file system
-----------------
1) mount -t proc proc /proc

# check which filesystems running kernel support
cat /proc/filesystems

sysfs file system
----------------
mount -t sysfs sysfs /sys

Debugfs
-------
mount -t debugfs none /sys/kernel/debug/

or create /etc/fstab or /etc/mtab and run mount -a
---------------------------------------------------
# entries in fstab
<filesystem>	<mount_point>		<type>		<options>			<dump>	<pass>
sysfs			/sys				sysfs		defaults,noatime	0		0
proc			/proc				proc		defaults			0		0
debugfs			/sys/kernel/debug 	debugfs 	defaults			0		0
--------------------------------------------------------------------------------
VI
--------------------------------------------------------------------------------
ctrl + p :typing assist, displays all literals starting with
ctrl + n

:Explore
ctrl + 6
--------------------------------------------------------------------------------
# sudo -s
--------------------------------------------------------------------------------
type in sudo -s in terminal. This gives super user terminal session.

--------------------------------------------------------------------------------
xargs: transform the STDIN to arguments,
--------------------------------------------------------------------------------
xargs -i@ ~command contains @~: a placeholder for the argument to be used in a
	specific position in the ~command~, the @ sign is a placeholder which could
	replaced by any string. 

Example usage of xargs
----------------------
# following command ls *.txt, displays all text files in current dir, and each
 file is passed as an argument to wc -l, which counts the number of lines in
 each file. The output of this command will be list of number of lines in each
 file followed by its name.

ls *.txt | xargs wc -l
--------------------------------------------------------------------------------
# "sed" to replace a string in multiple files in current folder
--------------------------------------------------------------------------------
# occurences of foo will be replaced with bar. Does not work if string has white
  spaces. This is limited to files in current folder

# To replace a path within files (avoiding escape characters) you may use the
  following command:

 sed s/regexp/replacement/: substitute string matching regexp with replacement.

 sed s/regexp/replacement/g : global, make the substitution for each match
							  instead of only the first match.

 sed -i 's/foo/bar/g' *

# The @ sign means that all of the special characters should be ignored in a
	following string.

sed -i 's@old_path@new_path@g'

--------------------------------------------------------------------------------
# replace in current and all sub directories: using find
--------------------------------------------------------------------------------
find . -type f -exec sed -i 's/foo/bar/g' {} +

--------------------------------------------------------------------------------
# using grep
--------------------------------------------------------------------------------
grep -rlu 'old-word'  * | xargs -i@ sed -i 's/old-word/new-word/g' @

command break down:
grep -r: --recursive, recursively read all files under each directory.
grep -l: --print-with-matches, prints the name of each file that has a match,
	 instead of printing matching lines.
grep -i: --ignore-case. 

--------------------------------------------------------------------------------
# grep -rl string1 somedir/ | xargs sed -i 's/string1/string2/g'
--------------------------------------------------------------------------------
 grep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g'

# Quick grep explanation:
    -R - recursive search
    -i - case-insensitive
    -I - skip binary files (you want text, right?)
    -l - print a simple list as output. Needed for the other commands

The grep output is then piped to sed (through xargs) which is used to actually
replace text. The -i flag will alter the file directly. Remove it for a kind of
"dry run" mode.Quick grep explanation:

grep -RiIl 'search' | xargs sed -i 's/search/replace/g'

--------------------------------------------------------------------------------
ctags
--------------------------------------------------------------------------------
ctrl ] : jump to the tag underneath the cursor
:ts <tag> : search for a particular tag
:tn: go to next definition for the last tag
:tp: go to previous definition for the last tag
:ts: list all of the definitions of the last tag
ctrl-t: jump back up in the tag stack

--------------------------------------------------------------------------------
awk
--------------------------------------------------------------------------------
Operations:
# Scans a file line by line
# Splits each input line into fields
# Compares input line/fields to pattern
# Performs action(s) on matched lines

Syntax:
awk options 'selection _criteria {action }' input-file > output-file

-f program-file 
Reads the AWK program source from the file program-file, instead of from the
first command line argument.

-F fs
use fs for input field separator

example:
1) awk '{print}' <file-name>	# prints every line of data from file

2) awk '/<pattern>/ {print}' <file-name> #print line which matches pattern

3) awk '/<pattern>/ {print $1}' <file-name> #print first column of matched pattern

Built in variables
S0 : represents entire line
$1 : first column
$2 : second column and so on

so example 2 is equivalent to
4) awk '/<pattern>/ {print $0}' <file-name>

NR : current count of number of input records
NF : keeps count of number of fields
RS : record separator, default is new line
OFS: output field separator
ORS: output record separator

following command prints first column whose second column value is "abc"
5) awk '$2 == "abc" {print $1}' <file-name>

--------------------------------------------------------------------------------
group
--------------------------------------------------------------------------------
cat /etc/group

format: 
group_name:password:group_id:group_list

groups <user name>	# list groups of specified user
groups : list groups of current user

id : list all id of current user or given user
id -G : list groups of current user

--------------------------------------------------------------------------------
ps:
Source:
https://www.cyberciti.biz/faq/linux-command-to-see-major-minor-pagefaults/
https://scoutapm.com/blog/understanding-page-faults-and-memory-swap-in-outs-when-should-you-worry
--------------------------------------------------------------------------------
ps -o min_flt,maj_flt 1

Major Fault: (for code)
    A major fault occurs when disk access required. For example, start an app
	called Firefox. The Linux kernel will search in the physical memory and CPU
	cache. If data do not exist, the Linux issues a major page fault.

	A major page fault is one that can only be satisfied by accessing the disk.

Minor Fault: (for code)
    A minor fault occurs due to page allocation.

	A minor page fault can be satisfied by sharing pages that are already in
	memory.

Copy on Write: (for data)
	A similar thing happens for data memory used by a program. An executable can
	ask Linux for some memory, say 8 megabytes, so that it can perform some task
	or other. Linux doesn't actually give the process 8 megabytes of physical
	memory. Instead it allocates 8 megabytes of virtual memory and marks those
	pages as "copy on write." This means that while they are unused there is no
	need to actually physically allocate them, but the moment the process writes
	to that page, a real physical page is allocated and the page assigned to the
	process.

	This happens all the time on a multi-user, multitasking system. The physical
	memory is used in the most efficient way possible to hold the parts of
	memory that are actually needed for processes to run.

Swapping:
	what happens when the kernel doesn't have any more physical memory left? 
	
	The kernel will start to write to disk some of the pages which it is holding
	in memory, and use the newly freed pages to satisfy the current page faults.

	Swap Out:
	The process of writing pages out to disk to free memory is called
	swapping-out. 

	Swap In:
	If later a page fault is raised because the page is on disk, in the swap
	area rather than in memory, then the kernel will read back in the page from
	the disk and satisfy the page fault. This is swapping-in.
	Swapping occurs when pages are written to disk to free memory so that a
	major page fault can be satisifed.

	Swap activity (swap in and swap out) is the primary performance concern when
	it comes to page faults.

	The kernel's aggressiveness in preemptively swapping-out pages is governed
	by a kernel parameter called swappiness. It can be set to a number from 0 to
	100, where 0 means that more is kept in memory and 100 means that the kernel
	should try and swap-out as many pages as possible. The default value is 60.
	Kernel maintainer Andrew Morton has stated that he uses a swappiness of 100
	on his desktop machines.

ps -o min_flt,maj_flt,cmd,args,uid,gid 1

We can use other standard linux commands such as top, time and sar to view page
faults for all process or specific process.

# for time provide full path to show page faults
/usr/bin/time -v firefox


top -d 1

sar -B

vmstat 
