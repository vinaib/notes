--------------------------------------------------------------------------------
MMU
-------------------------------------------------------------------------------
-> An important function of a Memory Management Unit (MMU) is to enable you to
   manage tasks as independent programs running in their own private virtual
   memory space.

-> The ARM MMU is responsible for translating addresses of code and data from
   the virtual view of memory to the physical addresses in the real system.
-> The translation is carried out by the MMU hardware and is transparent to the
   application.
-> In addition, the MMU controls such things as memory access permissions,
	memory ordering and cache policies for each region of memory.
-> In multi-tasking embedded systems, we typically require a way to partition
   the memory map andaassign permissions and memory attributes to these regions
   of memory. In situations where we are running more complex operating systems,
   like Linux, we require even greater control over the memory system.
-> The MMU enables tasks or applications to be written in a way that requires
   them to have no knowledge of the physical memory map of the system, or about
   other programs that might be running simultaneously.
->  This enables you to use the same virtual memory address space for each
    program. It also lets you work with a contiguous virtual memory map, even if
	the physical memory is fragmented.
->	Applications are written, compiled and linked to run in the virtual memory
	space.
-> When the MMU is disabled, all virtual addresses map directly to the
   corresponding physical address (a flat mapping).
-> If the MMU cannot translate an address, it generates an abort exception on
   the processor and provides information to the processor about what the
   problem was. This feature can be used to map memory or devices on-demand, one
   page at a time.

-> The MMU enables you to build systems with multiple virtual address maps. Each
   task can have its own virtual memory map.

-> The address translation carried out by the MMU is done using translation
   tables. These are tree-shaped table data structures created by software in
   memory, that the MMU hardware traverses to accomplish virtual address
   translation.
-> Translation tables (ARM architecture) in generic computer terminology as
   page tables
-> The ARM architecture uses multi-level page tables, and defines translation
   tables as a generic term for all of these. An entry in a translation table
   contains all the information required to translate a page in virtual memory
   to a page in physical memory.
-> Translation table entries are organized by virtual address. In addition to
   describing the translation of that virtual page to a physical page, they also
   provide access permissions and memory attributes necessary for that page.
-> Translation table walking /page table walking.

-> Before the MMU is enabled, the translation tables must be written to memory.
-> The TTBR register must be set to point to the tables.
-> code to enable MMU
MRC p15, 0, R1, c1, C0, 0  ;Read control register
ORR R1, #0x1				 ;Set M bit
MCR p15, 0,R1,C1, C0,0   ;Write control register and enable MMU

--------------------------------------------------------------------------------
The Translation Lookaside Buffer (TLB)
-------------------------------------------------------------------------------
-> The Translation Lookaside Buffer (TLB) is a cache of recently executed page
   translations within the MMU.
-> On a memory access, the MMU first checks whether the translation is cached in
   the TLB. If the requested translation is available, you have a TLB hit, and
   the TLB provides the translation of the physical address immediately.
-> If the TLB does not have a valid translation for that address, you have a TLB
   miss and an external translation table walk is required. This newly loaded
   translation can then be cached in the TLB for possible reuse.

--------------------------------------------------------------------------------
Micro TLB and Main TLB
-------------------------------------------------------------------------------
The exact structure of the TLB differs between implementations of the ARM
processors. In general

-> There are one or more micro-TLBs that are situated close to the instruction
and data caches.

-> Addresses with entries that hit in the micro-TLB require no additional memory
look-up and no cycle penalty.

-> However, the micro-TLB has only a small number of mappings, typically eight
on the instruction side and eight on the data side.

-> This is backed by a larger main TLB (typically 64 entries), but there might
be some penalty associated with accesses that miss in the micro-TLB but that hit
in the main TLB.

-> The TLB is like other caches and so has a TLB line replacement policy, but
this is effectively transparent to users.

-> TLB Coherency

--------------------------------------------------------------------------------
Choice of page sizes
-------------------------------------------------------------------------------
-> Page size is essentially controlled by the operating system.
-> Smaller page sizes enable finer control of a block,of memory and potentially
can reduce the amount of unused memory in a page.
-> Smaller page sizes also enable finer control over permissions, cache
properties and so forth.








