-------------------------------------------------------------------------------
# Introduction
-------------------------------------------------------------------------------
LL/SC: Load Link and Store Conditional (Armv7 and above: LDREX/STREX pair)
CSA: Compare and Swap" ( < ARMV6 SWP/SWPB instructions): This is deprecated in
ARMV6 and later ISA

# Earlier  versions of ARM (before ARMV6):
SWP and
SWPB

# From ARMv6, ARM deprecates any use of SWP or SWPB
# and the ARMv7 Virtualization Extensions make these instructions OPTIONAL and
  deprecated

# If an implementation does not support the SWP and SWPB instructions, the
  ID_ISAR0.Swap_instrs and ID_ISAR4.SWP_frac fields are zero.

  ID_ISAR: is CP15, C0: register: Instruction Set Attribute Register
  ISAR0 ... ISAR7

# ARMv6 introduced a new mechanism to support more comprehensive non-blocking
  synchronization of shared memory, using synchronization primitives that scale
  for multiprocessor system designs. 

# ARMv7 extends support for this mechanism, and provides the following
  synchronization primitives in the ARM and Thumb instruction sets.

# Load-Exclusives:
LDREX
LDREXB
LDREXD
LDREXH
# Store-Exclusives:
STREX
STREXB
STREXD
STREXH
# Clear-Exclusive:
CLREX
-------------------------------------------------------------------------------
# Model Flow for exclusive accessing non aborting memory address x
-------------------------------------------------------------------------------
# The Load-Exclusive instruction reads a value from memory address x
# the executing processor tags the physical memory address for exclusive access
# the monitor(local/global) of the executing processor transitions to the
  "Exclusive Access state".
# The corresponding Store-Exclusive instruction succeeds in writing back to
  memory address x only if no other observer, process, or thread has performed a
  more recent store to address x.
# A Store-Exclusive performs a conditional store to memory, that depends on the
  state of the local/global monitor:
# state of monitor: Exclusive access state:
## If the address of the Store-Exclusive is the same as the address that has 
  been tagged in the monitor by an earlier Load-Exclusive, then the store 
  occurs.
## A status value is returned to a register:
  if the store took place the status value is 0
  otherwise, the status value is 1.
## The monitor (local/global) of the executing processor transitions to the 
  Open Access state.
# state of monitor: Open Access state
## no store takes place
## a status value of 1 is returned to a register
## the local monitor remains in the Open Access state  
# A Load-Exclusive instruction tags a small block of memory for exclusive access  
# A Store-Exclusive instruction to the same address clears the tag
# The size of the tagged block is IMPLEMENTATION DEFINED( CA8, CA9, CA15 ..)

# Processor local monitor will be either in
-> open access state
-> exclusive access state

# monitor: (General Defintion in OS concepts)
-> In parallel programming, a monitor is a synchronization construct that allows
threads to have both mutual exclusion and the ability to wait (block) for a
certain condition to become false.
-> Monitors also have a mechanism for signaling other threads that their
condition has been met
-> A monitor consists of a mutex (lock) object and condition variables. 
-> A condition variable essentially is a container of threads that are waiting
for a certain condition.
-> Monitors provide a mechanism for threads to temporarily give up exclusive
access in order to wait for some condition to be met, before regaining exclusive
access and resuming their task.
-------------------------------------------------------------------------------
# Scenarios 
## when not using exclusive instructions
## when ldrex and strex observers are different
-------------------------------------------------------------------------------
# When a processor writes using any instruction other than a Store-Exclusive:
## Normal memory access(not tagged) using str (non exclusive) instruction
   if the write is to a physical address that is not covered by its local
   monitor the write does not affect the state of the local monitor.

## Write to tagged memory using str (non exclusive) instruction
   if the write is to a physical address that is covered by its local monitor it
   is IMPLEMENTATION DEFINED whether the write affects the state of the local
   monitor.

## It is IMPLEMENTATION DEFINED whether a store to a tagged physical address
   causes a tag in the local monitor to be cleared if that store is by an
   observer other than the one that caused the physical address to be tagged.

## refer state machine in ARM ARM V7: page A3-116 section: A3.4.1


-------------------------------------------------------------------------------
# Facts
-------------------------------------------------------------------------------
# A local monitor implementation can be unaware of Load-Exclusive and
  Store-Exclusive operations from other processors.

# It is IMPLEMENTATION DEFINED whether the transition from Exclusive Access to
  Open Access state occurs when the Store or StoreExcl is from another observer

-------------------------------------------------------------------------------
Exclusive access instructions and Non-shareable memory regions (local monitor)
-------------------------------------------------------------------------------
# For memory regions that do not have the Shareable attribute, the exclusive
  access instructions rely on a local monitor that tags any address from which
  the processor executes a Load-Exclusive. Any non-aborted attempt by the same
  processor to use a Store-Exclusive to modify any address is guaranteed to
  clear the tag.
# In Exclusive access state if processor executes LoadExcl(x) again then it will
remain in exclusive state and changes tag to new address x.
-------------------------------------------------------------------------------
Exclusive access instructions and Shareable memory regions (global monitor)
-------------------------------------------------------------------------------
# LoadExcl(x) 
A Load-Exclusive from Shareable memory performs:
-> a load from memory, and 
-> causes the physical address of the access to be tagged as exclusive access
for the requesting processor.
-> This access also causes the exclusive access tag to be removed from any other
physical address that has been tagged by the requesting processor.

# The global monitor only supports a single outstanding exclusive access to
Shareable memory per processor.

# A Load-Exclusive by one processor has no effect on the global monitor state
for any other processor

# Store-Exclusive performs a conditional store to memory:
-> The store is guaranteed to succeed only:
-- if the physical address accessed is tagged as exclusive access for the
requesting processor and,
-- both the local monitor and the global monitor state machines for the
requesting processor are in the Exclusive Access state.

In a shared memory system, the global monitor implements a separate state
machine for each processor in the system.

The state machine for accesses to Shareable memory by processor (n) can respond
to all the Shareable memory accesses visible to it. This means it responds to:
-> accesses generated by the associated processor (n)
-> accesses generated by the other observers in the shareability domain of the
memory location (!n).	

--------------------------------------------------------------------------------
Semaphores
--------------------------------------------------------------------------------
The Swap (SWP) and Swap Byte (SWPB) instructions must be used with care to
ensure that expected behavior is observed:

Multiprocessor:
---------------
-> A system with multiple bus masters that uses Swap instructions
-> In this case, the semaphores must be placed in an "uncached" region of memory
-> where any buffering of writes occurs at a point common to all bus masters
using the mechanism.
-> The Swap instruction then causes a locked read-write bus transaction

Uniprocessor:
-------------
-> A system with multiple threads running on a uniprocessor that uses Swap
instructions to implement semaphores.
-> In this case, the semaphores can be placed in a "cached region" of memory
-> locked read-write bus transaction might or might not occur
-> The Swap and Swap Byte instructions are likely to have better performance on
such a system than they do on a system with multiple bus masters.

From ARMv6, ARM deprecates use of the Swap and Swap Byte instructions, and
strongly recommends that all new software uses the Load-Exclusive and
Store-Exclusive synchronization primitives.

