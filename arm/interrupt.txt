--------------------------------------------------------------------------------
Simplistic Interrupt handling
--------------------------------------------------------------------------------
1) An IRQ exception is raised by external hardware. The core performs several
steps automatically. 
 a) The contents of the PC in the current execution mode are stored in LR_IRQ. 
 b) The CPSR register is copied to SPSR_IRQ. 
 c) The CPSR content is updated so that the mode bits reflects the IRQ mode, 
    and the I bit is set to mask additional IRQs. 
 d) The PC is set to the IRQ entry in the vector table.

2) The instruction at the IRQ entry in the vector table (a branch to the
interrupt handler) is executed.

3) The interrupt handler saves the context of the interrupted program, that is,
it pushes onto the stack any registers that will be corrupted by the
handler. These registers will be popped from stack when the handler finishes
execution.

4) The interrupt handler determines which interrupt source must be processed and
calls the appropriate device driver.

5) Prepare the core to switch to previous execution state by copying the
SPSR_IRQ to CPSR, and restoring the context saved earlier, and finally the PC is
restored from LR_IRQ.

--------------------------------------------------------------------------------
IRQ_Handler
--------------------------------------------------------------------------------
PUSH {r0-r3, r12, lr} 	@ Store AAPCS registers and LR onto the IRQ mode stack
BL						@ identify_and_clear_source
BL						@ C-irq_handler
POP {r0-r3, r12, lr}	@ Restore registers and
SUBS pc, lr, #4			@ return from exception using modified LR

--------------------------------------------------------------------------------
Reentrant:
--------------------------------------------------------------------------------
A computer program is reentrant if it can be interrupted in the middle of its
execution and then be called again before the previous version has completed.

--------------------------------------------------------------------------------
Nested interrupt handler
--------------------------------------------------------------------------------
Nested interrupt handling is where the software is prepared to accept another
interrupt, even before it finishes handling the current interrupt. This enables
you to prioritize interrupts and make significant improvements to the latency of
high priority events at the cost of additional complexity. It is worth noting
that nested interrupt handling is a choice made by the software, by virtue of
interrupt priority configuration and interrupt control, rather than imposed by
hardware.

A reentrant interrupt handler must save the IRQ state and then switch core
modes, and save the state for the new core mode, before it branches to a nested
subroutine or C function with interrupts enabled.




