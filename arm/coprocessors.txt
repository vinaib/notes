--------------------------------------------------------------------------------
Coprocessor Support
--------------------------------------------------------------------------------
When using the MCR , MRC , MCRR , and MRRC instructions to access these
registers, the instruction arguments include:
• A coprocessor identifier: 
	coproc, as a value p0-p15, corresponding to CP0-CP15
• a coprocessor register:
	CRn or CRm, as a value c0-c15, to specify a coprocessor register number
• an opcode: 
	opc1 or opc2, as a value in the range 0-7

-> The ARM architecture supports coprocessors, to extend the functionality of an
ARM processor.
-> There are 16 coprocessors described as CP0 to CP15.

Coprocessor 15:
-> The following coprocessors are reserved by ARM for specific purposes
-> Coprocessor 15 (CP15) provides system control functionality.
-> This includes architecture and feature identification, as well as control,
	status information and configuration support. 
-> system control coprocessor	
-> CP15: configures VMSA (Virtual memory System Architecutre)
-> CP15: configures PMSA (Protected memory system architecture)
-> CP15: also provides performance monitor registers.

Coprocessor 14:
-> debug
-> the Thumb Execution Environment
-> direct Java bytecode execution

Coprocessor 10 and 11:
-> together support floating-point and vector operations
-> the control and configuration of the Floating-point and Advanced SIMD
   architecture extensions.

Coprocessor 8,9,12 and 13: 
-> reserved for future use by ARM
-> Any coprocessor access instruction attempting to access onse of these
   coprocessors is undefined.
 
Coporcessor 0 to 7:
-> can provide vendor specific features

setup_caches:
MRC p15, 0, r1, c1, c0, 0	; Read System Control Register (SCTLR)
BIC r1, r1, #1				; mmu off
BIC r1, r1, #(1 << 12)		; i-cache off
BIC r1, r1, #(1 << 2)		; d-cache & L2-$ off
MCR p15, 0, r1, c1, c0, 0	; Write System Control Register (SCTLR)

Above and more operations will be accessed through kernel code – in GCC on Linux, 
which are implemented in arch/arm/mm/cache-v7.S.

A common situation where cleaning or invalidation can be required is DMA.

When it is required to make changes made by the core visible to external memory,
so that it can be read by a DMA controller, it might be necessary to clean
the cache.

When external memory is written by a DMA controller and it is necessary to make
those changes visible to the core, the affected addresses must be invalidated in
the cache.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
