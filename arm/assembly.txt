--------------------------------------------------------------------------------
GNU Assembler Syntax
--------------------------------------------------------------------------------

sections
---------
.text: 		Executable code
.data: 		read/ write data
.rodata: 	readonly data
.bss: 		zero initialized data


Assembler Directives: refer GNU docs for full list
--------------------------------------------------
-> All assembler directives begin with a period “.”

.align
This causes the assembler to pad the binary with bytes of zero value, in data
sections, or NOP instructions in code, ensuring the next location will be on a
word boundary. .align n gives 2 ^n alignment on ARM cores.

.ascii “string”
Insert the string literal into the object file exactly as specified, without a
NULL character to terminate. Multiple strings can be specified using commas as
separators.

.asciiz
Does the same as .ascii , but this time additionally followed by a NUL character
(a byte with the value 0 (zero)).

.byte expression , 
.hword expression , 
.word expression
Inserts a byte, halfword, or word value into the object file. Multiple values
can be specified using commas as separators. The synonyms .2byte and .4byte can
also be used.

.data 
Causes the following statements to be placed in the data section of the final
executable.

.end 
Marks the end of this source code file. The assembler does not process anything
in the file after this point.

.equ symbol, expression
Sets the value of symbol to expression. The “=” symbol and .set have the same
effect.

.extern symbol
Indicates that symbol is defined in another source code file.

.global symbol
Tells the assembler that symbol is to be made globally visible to other source
files and to the linker.

.includ e “filename”
Inserts the contents of filename into the current source file and is typically
used to include header files containing shared definitions.

.text
This switches the destination of following statements into the text section of
the final output object file. Assembly instructions must always be in the text
section.
-----------------------------
GNU
Assembler 	armasm 	Description
-----------------------------
@ 			; 			Comment
#& 			#0x 		An immediate hex value
.if			IFDEF,IF	Conditional
.else		ELSE
.elseif		ELSEIF
.endif		ENDIF
.ltorg		LTORG
|			:OR:		OR
&			:AND:		AND
<<			:SHL:
>>			:SHR:
.macro		MACRO
.end		ENDM
.include	INCLUDE
.word		DCD
.short		DCW
.long		DCD
.byte		DCB
.req		RN
.global		IMPORT, EXPORT
.equ		EQU

Register naming conventions
----------------------------
General registers: R0 - R15
Stack Pointer Register: SP(R13)
Frame Pointer Register: FP(R11)
Link Register: LR (R14)
Program Counter: PC (R15)

Unified Assembly Language(UAL)
------------------------------
UAL gives the ability to write assembler code that can be assembled to run on
all ARM cores.

Using UAL the same code can be assembled for different instruction sets at the
time of assembly, not at the time the code is written.

This can be either through the use of command line switches or inline
directives.

It is worth noting that GNU Assembler now supports UAL through use of the
.syntax directive, though it might not be identical syntax to the ARM tools
assembler.
--------------------------------------------------------------------------------
Mixing C and assembly code
--------------------------------------------------------------------------------
- We can also insert assembly code into our C code, through the GCC asm statement
  asm("nop");

- Inline assembly code has a different syntax to regular assembly code. 
- Registers and constants have to be specified differently, if they refer to C expressions.  

example:
asm volatile (“usad8 %0, %1, %2” : “=r” (result): “r”(value1), “r”(value2));

General format:
asm volatile (assembler instructions : output operands (optional) : input operands (optional) : clobbered registers (optional) );

- The colons divide the statement up into parts
- The first part “ usad8 %0, %1, %2 ” is the actual assembly instruction
- The second part is an (optional) list of output values from the sequence. If more than one output is required, commas are used to separate the entries.
- Third part is an (optional) list of input values for the sequence, with the same format as the output

Important Note:
- If you don’t specify an output operand for an assembly sequence, it is quite likely that the C compiler optimizer will decide that it is not serving any useful purpose and optimize it away! 
- A way to avoid this is to use the "volatile attribute" that tells GCC not to optimize the sequence.

- In the actual assembly language statement, operands are referenced by a percent sign followed by the symbolic name in square brackets
- The symbolic name references the item with the same name in either the input or output operand list
- This name is completely distinct from any other symbol within your C code
- Alternatively, the name can be omitted and the operand can be specified using a percent sign followed by a digit indicating the position of the operand in the list (that is, %0 , %1 ... %9 )
- fourth part is (optional)	called the clobber list. 
Clobber list:
- This enables you to specify to the compiler what will be changed by the assembly code. 
- We can specify registers (for example, R0), the condition code flags (cc) or memory.

Constraints, When passing parameters to inline assembly statements:
- constraint “r“: specifies one of the registers R0-R15 in ARM state
- constraint “m”: is a memory address and 
- constraint “w”: is a single precision floating-point register
Constraints are preceded by "=, +, &"
- "=" indicate a write-only output operand
- "+" for a read/write output operand
- "&" modifier instructs the compiler not to select any register for the output value that is used for any of the input operands

attribute __naked:
TODO
Example:
void __naked get_fiq_regs(struct pt_regs *regs)


attribute asmlinkage:
TODO: instructs that input parameters in stack, not in registers
Example:
TODO







