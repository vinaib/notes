1) each execution context that can be independently scheduled must have its own
process descriptor "task_struct"

2) Unix-like operating systems allow users to identify processes by means of a
number called the Process ID (or PID), which is stored in the pid field of a
process descriptor.

3) /proc/sys/kernel/pid_max upper limit of PID values
By default, the maximum PID number is 32,767 even on 64bit systems too

4) In 64-bit architectures, the system administrator can enlarge the maximum PID
number up to 4,194,303.

5) pidmap_array:
-> bitmap that denotes which are the PIDs currently assigned and which are the
free ones.
-> Because a page frame contains 32,768 bits, in 32-bit architectures the
pidmap_array bitmap is stored in a single page.

struct thread_union {
	thread_info
	kernel_stack[8192]		
}
6) For each process, Linux packs two different data structures in a single
per-process memory area: a small data structure linked to the process
descriptor, namely the thread_info structure, and the Kernel Mode process stack.

7) The length of this memory area is usually 8,192 bytes

8) thread_info struct has pointer to task_struct, and processor register "sp"
points to stack.

9) 
movl $0xffffe000,%ecx /* or 0xfffff000 for 4KB stacks */
andl %esp,%ecx
movl %ecx,p			// p points to thread_info
movl (%ecx),p		// p points to task_struct

10) runqueue: lists group all processes in a TASK_RUNNING state

-> Linux 2.6 implements the runqueue differently. 
-> aim is to allow the scheduler to select the best runnable process in constant
time, independently of the number of runnable processes.
-> The trick used to achieve the scheduler speedup consists of 
--> splitting the runqueue in many lists of runnable processes
--> one list per process priority
--> Each task_struct descriptor includes a run_list field of type list_head
--> the run_list field links the process descriptor into the list of runnable
    processes having priority k.
--> on a multiprocessor system, each CPU has its own runqueue, that is, its own
    set of lists of processes.
--> to make scheduler operations more efficient, the runqueue list has been
    split into 140 different lists!
--> all these lists are implemented by a single prio_array_t data structure
--> The enqueue_task(p,array) function inserts a process descriptor into a
	runqueue list.
--> dequeue_task(p,array) function removes a process descriptor from a runqueue
	list.

1)  TASK_RUNNING states: are grouped in runqueue lists

2) Processes in a TASK_STOPPED , EXIT_ZOMBIE , or EXIT_DEAD state are not linked
in specific lists. stopped, zombie, and dead processes are accessed only via PID
or via linked lists of the child processes for a particular parent.

3) Processes in a TASK_INTERRUPTIBLE or TASK_UNINTERRUPTIBLE state are
subdivided into many classes. Processes in these state are stored in wait
lists/wait queues.


Process State:
--------------
TASK_RUNNING:
- The process is either executing on a CPU or 
- waiting to be executed.

TASK_INTERRUPTIBLE:
- The process is suspended (sleeping) until some condition becomes true
- Raising a hardware interrupt, 
  releasing a system resource the process is waiting for, or
  delivering a signal 
  are examples of conditions that might wake up the process

TASK_UNINTERRUPTIBLE:
- Like TASK_INTERRUPTIBLE
- except that delivering a signal to the sleeping process leaves its state
  unchanged.
- process must wait until a given event occurs without being interrupted

TASK_STOPPED:
- Process execution has been stopped
- the process enters this state after receiving a
  SIGSTOP, 
  SIGTSTP, 
  SIGTTIN,  or 
  SIGTTOU signal
  
TASK_TRACED:
- Process execution has been stopped by a debugger

EXIT_ZOMBIE:
- Process execution is terminated, 
- parent process has not yet issued a wait4() or waitpid() system call to return
  information about the dead process.
- the kernel cannot discard the data contained in the dead process descriptor
  because the parent might need it.

EXIT_DEAD:
- The final state
- process is being removed by the system because the parent process has just
  issued a wait4() or waitpid() system call for it.

set_task_state and set_current_state macros to set the state of process

--------------------------------------------------------------------------------
Process Switch
--------------------------------------------------------------------------------
Hardware Context:
- The set of data that must be loaded into the registers before the process
  resumes its execution on the CPU is called the hardware context.
- The hardware context is a subset of the process execution context  
- includes all information needed for the process execution
- In Linux, a part of the hardware context of a process is stored in the process
  descriptor, 
- while the remaining part is saved in the Kernel Mode stack.

Every process switch consists of two steps:
-------------------------------------------
1. Switching the Page Global Directory to install a new address space
2. Switching the Kernel Mode stack and the hardware context, which provides all
the information needed by the kernel to execute the new process, including the
CPU registers.

The switch_to macro:
--------------------
- second step of the process switch is performed by the switch_to macro
- It is one of the most hardware-dependent routines of the kernel

--------------------------------------------------------------------------------
Process Creation
--------------------------------------------------------------------------------
TODO

--------------------------------------------------------------------------------
Process Removal
--------------------------------------------------------------------------------
TODO

Questions
 1) How pid points to process descriptor?

 2) How kernel place thread_info struct at bottom of kernel stack?

