--------------------------------------------------------------------------------
Kernel Threads
--------------------------------------------------------------------------------
Q) Why kernel threads?
-> Some of the system processes run only in Kernel Mode, like:
- flushing disk caches, 
- swapping out unused pages, 
- servicing network connections
-> Run in background

--------------------------------------------------------------------------------
Kernel thread vs Regular process
--------------------------------------------------------------------------------
In Linux, kernel threads differ from regular processes in the following ways:

Kernel thread:
- Kernel threads run only in Kernel Mode
- they use only linear addresses greater than PAGE_OFFSET

Regular Process:
- run alternatively in Kernel Mode and in User Mode.
- use all four gigabytes of linear addresses, in either User Mode or Kernel Mode
--------------------------------------------------------------------------------
Creating a kernel thread
--------------------------------------------------------------------------------
- The kernel_thread() function creates a new kernel thread

Parameters:
- address of the kernel function to be executed (fn)
- argument to be passed to that function (arg), and 
- a set of clone flags (flags)

- The function essentially invokes do_fork() as follows:
  do_fork(flags|CLONE_VM|CLONE_UNTRACED, 
		  0, 
		  pregs, 
		  0, 
		  NULL, 
		  NULL);

- CLONE_VM flag avoids the duplication of the page tables of the calling process
- CLONE_UNTRACED ensures that no process will be able to trace the kernel thread
- pregs parameter corresponds to the address in the Kernel Mode stack

- new kernel thread starts by executing the fn(arg) function
- if this function terminates, the kernel thread executes the _exit() system
  call passing to it the return value of fn().
--------------------------------------------------------------------------------
Process 0 (does this thread is still created in newer kernels too?)
--------------------------------------------------------------------------------
- The ancestor of all processes, called process 0, the idle or swapper process
- created from scratch during the initialization phase of Linux
- This ancestor process uses the following statically allocated data structures
- A process descriptor stored in the init_task variable, which is initialized by
  the INIT_TASK macro.
- A thread_info descriptor and a Kernel Mode stack stored in the
  init_thread_union variable and initialized by the INIT_THREAD_INFO macro.
- The following tables, which the process descriptor points to:
— init_mm
— init_fs
— init_files
— init_signals
— init_sighand  
- The master kernel Page Global Directory stored in swapper_pg_dir
- The start_kernel() function initializes all the data structures needed by the
  kernel, enables interrupts, and creates another kernel thread, named process
  1(init_process).
- In multiprocessor systems there is a process 0 for each CPU.
- The swapper process running on CPU 0 
   initializes the kernel data structures, then 
   enables the other CPUs and 
   creates the additional swapper processes by means of the copy_process() function 
   passing to it the value 0 as the new PID.
--------------------------------------------------------------------------------
Process 1
--------------------------------------------------------------------------------
- The newly created kernel thread has PID 1 and shares all per-process kernel
  data structures with process 0.
- After having created the init process, process 0 executes the cpu_idle() func
- The kernel thread created by process 0 executes the init( ) function
- which in turn completes the initialization of the kernel
- init() invokes the execve() system call to load the executable program init
- init process stays alive until the system is shut down
- it creates and monitors the activity of all processes that implement the outer
  layers of the operating system.

--------------------
Other Kernel threads
--------------------
keventd (also called events)
- Executes the functions in the keventd_wq workqueue

kapmd
- Handles the events related to the Advanced Power Management (APM)

kswapd
- Reclaims memory

pdflush
- Flushes “dirty” buffers to disk to reclaim memory

kblockd
- Executes the functions in the kblockd_workqueue workqueue
- Essentially, it periodically activates the block device drivers,

ksoftirqd
- Runs the tasklets	
- there is one of these kernel threads for each CPU in the system
