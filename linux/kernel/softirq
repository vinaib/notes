--------------------------------------------------------------------------------
Deferrable functions: 
--------------------------------------------------------------------------------
-> Remember that the interrupt service routines of an interrupt handler are
   serialized, and often there should be no occurrence of an interrupt until the
   corresponding interrupt handler has terminated.  

-> Conversely, the deferrable tasks can execute with all interrupts enabled.
   Taking them out of the interrupt handler helps keep kernel response time small.

-> This is a very important property for many time-critical applications that
   expect their interrupt requests to be serviced in a few milliseconds.

-> Linux 2.6 answers such a challenge by using two kinds of non-urgent
   interruptible kernel functions: the so-called deferrable functions *
   (softirqs and tasklets), and those executed by means of some work queues.

-> Softirqs and tasklets are strictly correlated, because tasklets are implemented on top of softirqs

-> deferrable functions can be executed at unpredictable times

Four kinds of operations can be performed on deferrable functions:
1) Initialization:
- Defines a new deferrable function; this operation is usually done when the kernel initializes itself or a module is loaded.

2) Activation:
- Marks a deferrable function as “pending”—to be run the next time the kernel schedules a round of executions of deferrable functions. 
- Activation can be done at any time (even while handling interrupts).

3) Masking:
- Selectively disables a deferrable function so that it will not be executed by the kernel even if activated

4) Execution:
- Executes a pending deferrable function together with all other pending deferrable functions of the same type

Activation and execution are bound together: 
- a deferrable function that has been activated by a given CPU must be executed on the same CPU
- Binding the deferrable function to the activating CPU could in theory make better use of the CPU hardware cache.
- activating kernel thread accesses some data structures that will also be used by the deferrable function

- Moreover, binding  function to a CPU is always a potentially “dangerous” operation, because one CPU ight end up very busy while the others are mostly idle.


--------------------------------------------------------------------------------
Interrupt context: both Interrupt handler and deferrable function
--------------------------------------------------------------------------------
it specifies that the kernel is currently executing either an interrupt handler or a deferrable function.

in_interrupt():
- macro checks the hardirq and softirq counters in the current_thread_info()->preempt_count	
- If either one of these two counters is positive, the macro yields a nonzero value, otherwise it yields the value zero
	
--------------------------------------------------------------------------------
SoftIRQ's
--------------------------------------------------------------------------------
-> Softirqs are statically allocated, defined at compile time
-> while tasklets can also be allocated and initialized at runtime
-> Softirqs can run concurrently on several CPUs, even if they are of the same type
-> softirqs are reentrant functions and must explicitly protect their data structures with spin locks

-> Linux 2.6 uses a limited number of softirqs:
	Softirq		 index(prio)	Description
	HI_SOFTIRQ 		0 			Handles high priority tasklets
	TIMER_SOFTIRQ 	1 			Tasklets related to timer interrupts
	NET_TX_SOFTIRQ 	2 			Transmits packets to network cards
	NET_RX_SOFTIRQ 	3 			Receives packets from network cards
	SCSI_SOFTIRQ 	4 			Post-interrupt processing of SCSI commands
	TASKLET_SOFTIRQ 5 			Handles regular tasklets

-> linux on BBB: 4.14 has following softirqs:
/ # cat /proc/softirqs
                    CPU0
          HI:          1
       TIMER:    1927170
      NET_TX:      48349
      NET_RX:      34217
       BLOCK:          0
    IRQ_POLL:          0
     TASKLET:         22
       SCHED:          0
     HRTIMER:          0
         RCU:      46590

-> linux on my laptop 12 cores: 5.4.0-42-generic #46~18.04.1-Ubuntu
vinai@vinai:$ cat /proc/softirqs
                    CPU0       CPU1       CPU2       CPU3       CPU4       CPU5       CPU6       CPU7       CPU8       CPU9       CPU10      CPU11
          HI:         14          0         32          2          0          3          1         22        668          1         20          0
       TIMER:   42519420   45896736  147111723   74343455   43807781   43755020   40764509   39888896   49363741   53965620   43997897   41614237
      NET_TX:       1111        835        659        773     244396      28176        546        559        458        551        558      40852
      NET_RX:      42777      42301      41944      43870      43055      41063      39611      40163      39059      38739      37583   18434190
       BLOCK:      20188      15114     599983     195733     168488      88613    2824479     354520      14071      35289      18281      18552
    IRQ_POLL:          8          0          0          2          0          0          0          0          1          0          0          0
     TASKLET:      13306      11657     759942      96672      89403      71959      56482      46555      19542      28334      24151      56275
       SCHED:   71163776   52356261  149241889   75129959   43546685   43105308   41245847   39610854   49510168   54091058   43591445   40983900
     HRTIMER:         88         48         28         16         10          5          3          2          2          1          1     600289
         RCU:   16427684   17057959   24379721   19905042   16654332   15657132   15133161   14843897   16017333   17046677   16493566   16160240
--------------------------------------------------------------------------------
Data structures used for softirqs
--------------------------------------------------------------------------------
softirq_vec array: 
- data structure used to represent softirqs
- includes 32 elements of type softirq_action
- priority of a softirq is the index of the corresponding softirq_action element inside the array
- unique to each processor in the system

softirq_action datastructure: 
- consists of two fields: an action pointer to the softirq function and 
- a data pointer to a generic data structure that may be needed by the softirq function

- If the kernel does not make use of multiple Kernel Mode stacks: 
the macro always looks at the preempt_count field of the thread_info descriptor of the current process.

- If kernel makes use of multiple Kernel Mode stacks: 
the macro might look at the preempt_count field in the thread_info descriptor contained in a irq_ctx union associated with the local CPU.

irq_cpustat_t:
- field: __softirq_pending 
-- is a per-CPU 32-bit mask describing the pending softirqs;

local_softirq_pending()
- to get and set the value of the bit mask	
- macro that selects the softirq bit mask of the local CPU

preempt_count of thread_info:
- keep track both of kernel preemption and of nesting of kernel control paths
- this field encodes three distinct counters plus a flag
- Subfields of the preempt_count field
- see in_interrupt() above 
---------------------------------------------
Bits 	Description
---------------------------------------------
0–7 	Preemption counter 	(max value = 255)
8–15 	Softirq counter 	(max value = 255).
16–27 	Hardirq counter 	(max value = 4096)
28 		PREEMPT_ACTIVE flag

Preemption counter: (preemption disable)
- The first counter keeps track of how many times kernel preemption has been
explicitly disabled on the local CPU; the value zero means that kernel
preemption has not been explicitly disabled at all

- to determine whether the current process can be preempted or not?
  the kernel quickly checks for a zero value in the preempt_count field.

softirq counter: (deferrable functions disable)
- specifies how many levels deep the disabling of deferrable functions is
- level 0 means that deferrable functions are enabled

Hardirq counter: (nested interrupt handlers)
- third counter specifies the number of nested interrupt handlers on the local CPU
- the value is increased by irq_enter() and decreased by irq_exit()
--------------------------------------------------------------------------------
Handling softirqs	
--------------------------------------------------------------------------------
softirq initialization:
- open_softirq() function takes care of softirq initialization
- three parameters: 
  the softirq index, 
  a pointer to the softirq function to be executed, 
  and a pointer to a data structure that may be required by the softirq function.
- open_softirq() limits itself to initializing the proper entry of the softirq_vec array  

softirq activation:
- activated by means of the raise_softirq() function.
- softirq index nr as parameter
- action:
1 Executes the local_irq_save macro to save the state of the IF flag of the eflags register and to disable interrupts on the local CPU.
2 Marks the softirq as pending by setting the bit corresponding to the index nr in the softirq bit mask of the local CPU
3 If in_interrupt() yields the value 1, it jumps to step 5. This situation indicates either that raise_softirq() has been invoked in interrupt context, or that the softirqs are currently disabled.
4 Otherwise, invokes wakeup_softirqd() to wake up, if necessary, the ksoftirqd kernel thread of the local CPU
5 Executes the local_irq_restore macro to restore the state of the IF flag saved in step 1.

Pending softirqs:
- Checks for active (pending) softirqs should be perfomed periodically, but without inducing too much overhead.
- checks are performed in a few points of the kernel code
1 When the kernel invokes the local_bh_enable() function * to enable softirqs on the local CPU
2 When the do_IRQ() function finishes handling an I/O interrupt and invokes the irq_exit() macro
3 When one of the special ksoftirqd/n kernel threads is awakened
--------------------------------------------------------------------------------
The do_softirq() function
--------------------------------------------------------------------------------
- If pending softirqs are detected at one such checkpoint, local_softirq_pending() is not zero the kernel invokes do_softirq() to take care of them

function performs the following actions:
- If in_interrupt() yields the value one, this function returns. This situation indicates either that do_softirq() has been invoked in interrupt context or that the softirqs are currently disabled.
- Executes local_irq_save to save the state of the IF flag and to disable the interrupts on the local CPU.
- If the size of the thread_union structure is 4 KB, it switches to the soft IRQ stack, if necessary.
- Invokes the __do_softirq() function
- If the soft IRQ stack has been effectively switched in step 3 above, it restores the original stack pointer into the esp register, thus switching back to the exception stack that was in use before.
- Executes local_irq_restore to restore the state of the IF flag

	u32 pending;

	/* This actually occurs with local interrupts disabled, but that is omitted in this simplified example. If
	 * interrupts were not disabled, a softirq could have been raised (and thus be pending) in the intervening
	 * time between saving the mask and clearing it. This would result in incorrectly clearing a pending bit.
	 */
	pending = local_softirq_pending();

	if (pending) {
		struct softirq_action *h;

		/* reset the pending bitmask */
		set_softirq_pending(0);

		h = softirq_vec;
		do {
			if (pending & 1)
			h->action(h);
			h++;
			pending >>= 1;
		} while (pending);
	}

--------------------------------------------------------------------------------
Tasklets
--------------------------------------------------------------------------------
-> Tasklets execution is controlled more strictly by the kernel. 
-> Tasklets of the same type are always serialized: 
-> in other words, the same type of tasklet cannot be executed by two CPUs at the same time.
-> tasklets of different types can be executed concurrently on several CPUs
-> For most purposes, tasklets are good enough and are much easier to write because they do not need to be reentrant.
--------------------------------------------------------------------------------
When to use, usage
--------------------------------------------------------------------------------
- softtirq's are useful when performance is timing-critical, such as with networkig, block devices
- A softirq never preempts another softirq.
- ** Interrupt handler can preempt a softirq.
- Another softirq—even the same one—can run on another processor
- Additionally, kernel timers, tasklets are built on top of softirq's
- The softirq handlers run with interrupts enabled and cannot sleep
- While a handler runs, softirqs on the current processor are disabled.
- Another processor, however, can execute other softirqs. 
- If the same softirq is raised again while it is executing, another processor can run it simultaneously.
- If a softirq obtained a lock to prevent another instance of itself from running simultaneously, there would be no reason to use a softirq. 
- Consequently, most softirq handlers resort to per-processor data and other tricks to avoid explicit locking and provide excellent scalability.
- The raison d’être to softirqs is scalability [most imp reason]
- If you do not need to scale to infinitely many processors, then use a tasklet.
- Softirqs are most often raised from within interrupt handlers
- Softirqs are required only for high-frequency and highly threaded uses.

Example:
- Registering Your Handler
	open_softirq(NET_TX_SOFTIRQ, net_tx_action);
	open_softirq(NET_RX_SOFTIRQ, net_rx_action);

- Pend the sofirq
	//called in net/core/dev.c
	raise_softirq(NET_TX_SOFTIRQ);

See for below API in ethernet driver for triggering softirq schedule:
napi_schedule()



