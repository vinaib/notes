--------------------------------------------------------------------------------
Memory Area Management
--------------------------------------------------------------------------------
Memory Areas: that is, with sequences of memory cells having contiguous physical
			  addresses and an arbitrary length.

- Buddy system algorithm adopts the page frame as the basic memory area

  This is fine for dealing with relatively large memory requests, 
  
  For small memory areas it would be quite wasteful to allocate a full page
  frame to store a few bytes.

  A better approach instead consists of introducing new data structures that
  describe how small memory areas are allocated within the same page frame.

Internal Fragmentation:  
  In doing so, we introduce a new problem called internal fragmentation. It is
  caused by a mismatch between the size of the memory request and the size of
  the memory area allocated to satisfy the request.

How to solve internal fragmentation?
- A classical solution (adopted by early Linux versions) consists of providing
  memory areas whose sizes are geometrically distributed 
  the size depends on a power of 2 rather than on the size of the data to be
  stored.

  In this way, no matter what the memory request size is, we can ensure that the
  internal fragmentation is always smaller than 50 percent.
  How it will be 50 percent smaller?
  
  Following this approach: 
  - 13 lists of free memory areas
  - the kernel creates 13 geometrically distributed lists of free memory areas 
  - whose sizes range from 32 to 131,072 bytes
  - 2 ^ 2 -> 2 ^ 17 bytes
  - A dynamic list is used to keep track of the free memory areas contained in
    each page frame.
--------------------------------------------------------------------------------
The Slab Allocator:
--------------------------------------------------------------------------------
- Running a memory area allocation algorithm on top of the buddy algorithm is
  not particularly efficient.

Slab allocator is derived on following premises:
- The type of data to be stored may affect how memory areas are allocated

  when allocating a page frame to a User Mode process: 
  the kernel invokes the get_zeroed_page( ) function, which fills the page with
  zeros.
  
- The kernel functions tend to request memory areas of the same type repeatedly

- Requests for memory areas can be classified according to their frequency

- Requests of a particular size that are expected to occur frequently can be
  handled most efficiently by creating a set of special-purpose objects that
  have the right size, thus avoiding internal fragmentation.

- Requests for sizes that are rarely encountered can be handled through an
  allocation scheme based on objects in a series of geometrically distributed
  sizes.

Concept of Slab allocator:
- views the memory areas as objects consisting of both a set of data structures
  and a couple of functions or methods called the constructor and destructor

- The former initializes the memory area while the latter deinitializes it

- To avoid initializing objects repeatedly: 
  the slab allocator does not discard the objects that have been allocated and
  then released but instead saves them in memory. When a new object is then
  requested, it can be taken from memory without having to be reinitialized.

- The slab allocator groups objects into caches

- Each cache is a “store” of objects of the same type

Example: 
- slab allocator cache named filp: file pointer
- contains objects of open files
- when a file is opened, the memory area needed to store the corresponding “open
  file” object is taken from a slab allocator cache named filp.

- The area of main memory that contains a cache is divided into slabs

- each slab consists of one or more contiguous page frames that contain both
  allocated and free objects

- the kernel periodically scans the caches and releases the page frames
  corresponding to empty slabs.

Cache Descriptor:
-----------------
- Each cache is described by a structure of type struct kmem_cache_t
- which is equivalent to struct kmem_cache_s

Slab Descriptor:
----------------
- Each slab of a cache has its own descriptor of type slab

- Slab descriptors can be stored in two possible places:
  -- External slab descriptor (kmem_cache)
	 Stored outside the slab, in one of the general caches

  -- Internal slab descriptor
	 Stored inside the slab, at the beginning of the first page frame assigned
	 to the slab.

- The slab allocator chooses the second solution when the size of the objects is
  smaller than 512MB or when internal fragmentation leaves enough space for the
  slab descriptor and the object descriptors
--------------------------------------------------------------------------------
General and Specific Caches
--------------------------------------------------------------------------------
- Caches are divided into two types: general and specific.
- General caches are used only by the slab allocator for its own purposes
- while specific caches are used by the remaining parts of the kernel

General Caches:
- A first cache called kmem_cache whose objects are the cache descriptors of the
  remaining caches used by the kernel.
- The cache_cache variable contains the descriptor of this special cache

- Several additional caches contain general purpose memory areas
- The range of the memory area sizes typically includes 13 geometrically
  distributed sizes.
- A table called malloc_sizes points to 26 cache descriptors associated with
  memory areas of size 32, 64, 128, 256, 512, 1,024, 2,048, 4,096, 8,192,
  16,384, 32,768, 65,536, and 131,072 bytes.
	   
- For each size, there are two caches: 
  one suitable for ISA DMA allocations and 
  the other for normal allocations

- The kmem_cache_init( ) function is invoked during system initialization to set
  up the general caches.

Specific Caches:

kmem_cache_create(): to create
- Specific caches are created by the kmem_cache_create() function.
- Depending on the parameters, the function first determines slab descriptor
  outside(kmem_cache) or inside of the slab.
- allocates a cache descriptor for the new cache from the cache_cache general
  cache.
- inserts the descriptor in the cache_chain list of cache descriptors 

kmem_cache_destroy(): to remove
- destroy a cache and remove it from the cache_chain list
- This function is mostly useful to modules that create their own caches when
  loaded and destroy them when unloaded.
- the kernel must destroy all slabs before destroying the cache

kmem_cache_shrink():
- function destroys all the slabs in a cache by invoking slab_destroy( )
  iteratively.

/proc/slabinfo:
- The names of all general and specific caches can be obtained at runtime
--------------------------------------------------------------------------------
Interfacing the Slab Allocator with the Zoned Page Frame Allocator
--------------------------------------------------------------------------------
- slab allocator relies on the zoned page frame allocator to create a new slab
  to obtain a group of free contiguous page frames.
- kmem_getpages() function is used to alloc page frames to slab
- kmem_freepages() releases page frames assigned to a slab
--------------------------------------------------------------------------------
Allocating a Slab to a Cache
--------------------------------------------------------------------------------
- A newly created cache does not contain a slab and therefore does not contain
  any free objects.
- New slabs are assigned to a cache only when both of the following are true:  
  -- A request has been issued to allocate a new object
  -- The cache does not include a free object

cache_grow():
- slab allocator assigns a new slab to the cache by	invoking cache_grow()
- This function calls kmem_getpages( ) to obtain from the zoned page frame
  allocator.
- then call alloc_slabmgmt( ) to get a new slab descriptor.	
  -- CFLGS_OFF_SLAB flag of the cache descriptor is set, 
	 the slab descriptor is allocated from the general cache pointed to by the
	 slabp_cache field of the cache descriptor.
	 otherwise, the slab descriptor is allocated in the first page frame of the
	 slab.
- Next, cache_grow() calls cache_init_objs( ) , which applies the constructor
  method (if defined) to all the objects contained in the new slab.
- cache_grow( ) calls list_add_tail() to add the newly obtained slab descriptor
  *slabp at the end of the fully free slab list of the cache descriptor
  *cachep , and updates the counter of free objects in the cache.
--------------------------------------------------------------------------------
Releasing a Slab from a Cache
--------------------------------------------------------------------------------
- Slabs can be destroyed in two cases:
  -- There are too many free objects in the slab cache
  -- A timer function invoked periodically determines that there are fully
	unused slabs that can be released

slab_destroy()
- function is invoked to destroy a slab and release the corresponding page
  frames to the zoned page frame allocator.
--------------------------------------------------------------------------------
Object Descriptor  
--------------------------------------------------------------------------------
- Each object has a short descriptor of type kmem_bufctl_t
- Object descriptors are stored in an array placed right after the corresponding
  slab descriptor.
- the object descriptors of a slab can be stored in two possible ways
-- External object descriptors
   - Stored outside the slab in the general cache 
   - pointed by slabp_cache field of the cache descriptor
-- Internal object descriptors
   - Stored inside the slab, right before the objects they describe.

- first object descriptor in the array describes the first object in the slab   
- object descriptor is simply an unsigned short integer
--------------------------------------------------------------------------------
Aligning Objects in Memory
--------------------------------------------------------------------------------
- objects managed by the slab allocator are aligned in memory
- they are stored in memory cells whose initial physical addresses are multiples
  of a given constant.
- When creating a new slab cache, it’s possible to specify that the objects
  included in it be aligned in the first-level hardware cache. To achieve this,
  the kernel sets the SLAB_HWCACHE_ALIGN cache descriptor flag. The
  kmem_cache_create( ) function handles the request as follows:
--------------------------------------------------------------------------------
Slab Coloring  
--------------------------------------------------------------------------------
- We know that the same hardware cache line maps many different blocks of RAM.
- Objects that have the same offset within different slabs will, with a
  relatively high probability, end up mapped in the same cache line.
- cache hardware might therefore waste memory cycles transferring two objects
  from the same cache line back and forth to different RAM locations, while
  other cache lines go underutilized.
- The slab allocator tries to reduce this unpleasant cache behavior by a policy
  called slab coloring.
  -- different arbitrary values called colors are assigned to the slabs
--------------------------------------------------------------------------------
Local Caches of Free Slab Objects  
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Allocating a Slab Object
--------------------------------------------------------------------------------
kmem_cache_alloc():
- function to allocate new objects
- parameters:
	-- cachep points to the cache descriptor from which the new free object to
	 be obtained
	-- flag represents the flags to be passed to the zoned page frame allocator
	 functions
--------------------------------------------------------------------------------
Freeing a Slab Object	 
--------------------------------------------------------------------------------
kmem_cache_free():
- function releases an object previously allocated by the slab allocator
--------------------------------------------------------------------------------
General Purpose Objects: kmalloc() and kfree()
--------------------------------------------------------------------------------
- infrequent requests for memory areas are handled through a group of general
  caches whose objects have geometrically distributed sizes ranging from a
  minimum of 32 to a maximum of 131,072 bytes.

- Objects of this type are obtained by invoking the kmalloc() function

- The function uses the malloc_sizes table to locate the nearest power-of-2 size
  to the requested size. 

- It then calls kmem_cache_alloc( ) to allocate the object.
	
- Objects obtained by invoking kmalloc() can be released by calling kfree()
--------------------------------------------------------------------------------
Memory Pools
--------------------------------------------------------------------------------
- a memory pool allows a kernel component to allocate some dynamic memory to be
  used only in low-on-memory emergencies.

- Memory pools should not be confused with the reserved page frames described in
  the earlier section “The Pool of Reserved Page Frames.”.
  - In fact, those page frames can be used only to satisfy atomic memory
  allocation requests issued by interrupt handlers or inside critical regions.

- a memory pool is a reserve of dynamic memory that can be used only by a
  specific kernel component, namely the “owner” of the pool.
  




