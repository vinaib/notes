DEFAULT_MESSAGE_LOGLEVEL: "kernel/printk.c" 
--------------------------------------------------------------------------------
1) A printk statement with no specified priority defaults to option
(KERN_WARNING)

2) If both klogd and sys-logd are running on the system, kernel messages are
appended to /var/log/messages.

3) If klogd is not running, the message won’t reach user space unless you read
/proc/kmsg (which is often most easily done with the dmesg command).

sudo cat /proc/kmsg : cat will block on kmsg, any new message from kernel will
be dumped to output

(log_level vs console_log_level):
+++++++++++++++++++++++++++++++++++
4) Based on the loglevel, the kernel may print the message to the current
console, be it a text-mode terminal, a serial port, or a parallel printer. If
the priority is less than the integer variable console_loglevel , the message is
delivered to the console one line at a time.

5) The variable console_loglevel is initialized to DEFAULT_CONSOLE_LOGLEVEL and
can be modified through the sys_syslog system call. One way to change it is by
specifying the –c switch when invoking klogd, as specified in the klogd manpage.
Note that to change the current value, you must first kill klogd and then
restart it with the –c option.

6) The new level is specified as an integer value between 1 and 8, inclusive. 
If it is set to 1 , only messages of level 0 ( KERN_EMERG ) reach the console; 
if it is set to 8 , all messages, including debugging ones, are displayed.

7) It is also possible to read and modify the console loglevel using the text
file /proc/sys/ kernel/printk.

The file hosts four integer values: 
the current loglevel, 
the default level for messages that lack an explicit loglevel, 
the minimum allowed loglevel, and 
the boot-time default loglevel. 

Writing a single value to this file changes the current loglevel to that value;
thus, for example, you can cause all kernel messages to appear at the console by
simply entering:

# echo 8 > /proc/sys/kernel/printk

Redirecting Consle Messages
--------------------------------------------------------------------------------
Linux allows for some flexibility in console logging policies by letting you
send messages to a specific virtual console.

By default,the “console” is the current virtual terminal. To select a different
virtual terminal to receive messages, you can issue ioctl(TIOCLINUX) on any
console device.

cat /proc/kmsg:  you can try this after stopping klogd.
-------------------------------------------------------------------------------
you’ll find that the /proc file looks like a FIFO, in that the reader blocks,
waiting for more data.

Working of printk
--------------------------------------------------------------------------------
-> The printk function writes messages into a circular buffer that is
__LOG_BUF_LEN bytes long: a value from 4 KB to 1 MB chosen while configuring the
kernel.

-> The function then wakes any process that is waiting for messages, that is,
any process that is sleeping in the syslog system call or that is
reading /proc/kmsg.

-> but note that reading from /proc/kmsg consumes the data from the log buffer,
whereas the syslog system call can optionally return log data while
leaving it for other processes as well.

-> If the circular buffer fills up, printk wraps around and starts adding new
data to the beginning of the buffer, overwriting the oldest data.

-> Another feature of the Linux approach to messaging is that printk can be
invoked from anywhere, even from an interrupt handler, with no limit on how much
data can be printed. The only disadvantage is the possibility of losing some
data.

->If the klogd process is running, it retrieves kernel messages and dispatches
them to syslogd, which in turn checks /etc/syslog.conf to find out how to deal
with them. syslogd differentiates between messages according to a facility and a
priority; allowable values for both the facility and the priority are defined in
<sys/syslog.h>. Kernel messages are logged by the LOG_KERN facility at a
priority corresponding to the one used in printk (for example, LOG_ERR is used
for KERN_ERR messages). If klogd isn’t running, data remains in
the circular buffer until someone reads it or the buffer overflows.


