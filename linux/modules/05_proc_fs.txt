--------------------------------------------------------------------------------
Implementing files in /proc
--------------------------------------------------------------------------------
-> All modules that work with /proc should include <linux/proc_fs.h> to define
the proper functions.

-> When a process reads from your /proc file, the kernel allocates a page of
memory (i.e.,PAGE_SIZE bytes) where the driver can write data to be returned to
user space. 
That buffer is passed to your function, which is a method called read_proc: 

int (*read_proc)(
 char *page, //page pointer is the buffer where you’ll write your data
 char **start,  //start is used by the function to say where the interesting
		//  data has been written in page.
 off_t offset, // offset and count have the same meaning as for the read method
 int count,
 int *eof, //set by the driver to signal that it has no more data to return. 
 void *data); //data is a driver-specific data pointer

returns: number of bytes of data actually placed in the page buffer

Other usages of *start
--------------------------------------------------------------------------------
-> its purpose is to help with the implementation of large (greater than one
page) /proc files.

--------------------------------------------------------------------------------
Creating your /proc file:
--------------------------------------------------------------------------------
struct proc_dir_entry *create_proc_read_entry(
		const char *name,
		mode_t mode, 
		struct proc_dir_entry *base,
		read_proc_t *read_proc, 
		void *data);

-> The directory entry pointer can be used to create entire directory
hierarchies under /proc. Note, however, that an entry may be more easily placed
in a subdirectory of /proc simply by giving the directory name as part of the
name of the entry—as long as the directory itself already exists.

remove_proc_entry:
--------------------------------------------------------------------------------
Entries in /proc, should be removed when the module is unloaded.

Issues with proc: removal of /proc entries.
--------------------------------------------------------------------------------
1) As there is no owner associated to /proc entries, so using them doesn’t act
on the module’s reference count. This problem is simply triggered by running
sleep 100 < /proc/myfile just before removing the module.

2) Another issue is about registering two entries with the same name, both when
you access them and when you call remove_proc_entry.






