#Repository
## Every git repo contains .git folder. This contains all information and file.
## As .git contains all info, your git repo must be as narrow as possible. Like one module as each git repo.
## git version files not folders
## commits are saved to timeline known as branch. A git repo has atleast one branch and by default that branch is called master.
## Additional branches can be created

# Minimal COnfiguration:
## User's name
## User's Email

# git on Windows
git config --global user.name "xxxxx"
git config --global user.email "xxxxx@xxx.com"
git config --global core.editor "notepad++ -multiInst -nosession"

# p4merge as Diff tool
git config --global diff.tool p4merge
git config --global difftool.p4merge.path "c:/program Files/Perforce/p4merge.exe"
git config --global difftool.prompt false

# configure p4merge as graphical merge tool
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "c:/program Files/Perforce/p4merge.exe"
git config --global mergetool.prompt false

# below command opens above configuration in notepad++
git config --global -e

#to list all git config
git config --global -l

# try out help
git config --global --help


# Windows git
## gitBash: git-scm.com/download/win
## notepad++: http: notepad-plus-plus.com
## P4MErge: http://perforce.com

## P4mege install on linux
## extract downloaded archive
## copy extracted bin, lib folder to /opt/p4merge/
## create symlink "sudo ln -s /opt/p4merge/bin/p4merge /usr/local/bin/p4merge

# Getting Started/Creating New Repo

git init uboot
# above command creates "new empty repository with uboot folder.
# it also creates a folder
# output of command
"Intialized empty Git repository in /home/vinai/workspace/projects/uboot/.git/"

# Git states
## wworking directory:
## Staging Area
## Repository (.git folder)
## Remote repository

# adding new file/s or modified files to staging area
git add <new_file_name>		# adds the new file to staging area
git add . 			# . is wild character which adds all files under current directory
git add <modified_file>		# this command adds modified exisisting file to staging area, this can be 
				# undone by git reset HEAD

# to view status
git status

# commit files
git commit -m "first file"	# commit message.
git commit			# with out option -m, it opens configured editor to type in message
				# type in commit message in edior, save and exit.
git commit -am "updates"	# add and commit modified files with commit message.
git commit -am "new file"	# this command fails to add untracked files, -a option works only on
				# tracked files.

# list all the commits of the repo
git log 			# with all info
## oneline history, by using options for log
git log --oneline --graph --decorate --all

# show last commit and diff
git show

# list tracked files in repo
git ls-files

# undo changes from staging area
git reset HEAD <file_name>	# after this command specified file is unstaged.
				# Once file is unstaged, your modifications is not
				# deleted. It will show as modified.

# if two or more files are modified and added to staging area then we cannot 
# unstage particular one file by git reset HEAD <file_name_1>. This command 
# just returns by not doing any action. git reset HEAD will unstage all the 
# files which are staged in single command. If you want to unstage single file
# then good practice is always stage single file and you have a chance to 
# unstage that file only even though there are multiple files in staging area.

# Delete your modifications on ustaged file
git checkout -- <file_name>	# checkouts the head version, which means deletes
				# the current modification which are in file.


# Alias
## to create alias at user level 

# hist is alias for "log --oneline --graph --decorate --all"
# to use this alias, use command git hist
# to view all aliases: git config --global --list
git config --global alias.hist "log --oneline --graph --decorate --all"	

git hist -- <file_name> # history on particular file
git hist 		# history on entire repo
git hist --author=vinai # history on commits, by particular author

# Renaming tracked files
git mv ds.txt data_struct.txt		# rename given file, but changes are staged
					# not committed
git status				# shows renamed changes to be committed
git commit -m "renaming ds file" 	# renaming changes will be committed

# Remove tracked file
git rm data_struct.txt				# remove file, but this remove is staged not committed
git status					# can be viewed staged files
git commit -m "deleting data_struct.txt"	# committing deleting files

# Managing(rename, addition, deletion) files with bash commands and later update
mv commands.txt command.txt		# renaming commands.txt with bash command
touch demo.txt				# create new file demo.txt
git status				# displays commands.txt as deleted and demo as untracked file
git add -u				# stages the modifications done by updation, this option will not do 
					# new file addition. This deletes the commands.txt and moves to staged
					# This will not add command.txt, command.txt still be shown under untracked
git add -A				# will stage new files, modifications like update, rename

rm demo.txt
git add -u demo.txt			# specifying specific filename will modifies only that file, otherwise it
					# will take all modifications.


# Excluding unwanted files
# make entry in .gitignore file
.gitignore

# syntax in .gitignore, one rule per line
filename.log
*.log
*.swp

# commit this .gitignore file

# Comparing Differences
git hist					# alias to show all commits
git diff <commit id 1> <commit id 2> 		# eg: "git diff 1ff083e HEAD". HEAD is special pointer
git difftool <commit id 1> <commit id 2>	# differences are launched in configured difftool(p4merge), This command will cycle 
						# through all differences. Launches differences in separate window for each file.
						# It launches successive file differences after closing one.
git diff					# shows diff with current changes to last changes i.e. HEAD
git difftool
git diff help

# Branching
git branch					# shows current branch with highlighted green, and with asterik which denotes that it is a
						# current branch. As of now there are no other branches, it will list master as the only branch.
						# branches are just timelines, once branch changes are merged to master you do not need those branches
## Creating branch and switch to
git checkout -b updates				# option -b: creates new branch with name "updates" and switch to it. Current changes will be
						# carried forward to branch

git branch					# at this point two branches are there, this command will list both master and updates. But now
						# updates is highlighted in green with asterik: denotes that this is active branch
						# now commits will be reflected to branch. HEAD is on Branch updates

git hist					# checkout all history, shows even branching information.
git diff master updates				# diff between branches

# switch to other branch
git checkout <branch name>			# switch to given branch name
git checkout master				# switch to master branch. Please note that before switching to other branch all current changes 
						# must be committed else git will not allow to switch to branch
git hist					# HEAD is now on master, can be viewed by git hist

# Merge from branch
git merge <branch_name_2>			# If now you are on <branch_name_1> you want merge changes from <branch_name_2>, this is command
git merge updates				# in this example, if current branch is master, then all changes from updates are merged and committed
						# to master. If changes are simple merge will happen smoothly i.e. "Fast Forward" merge.

## Fast forward merge
## Automatic merge
## Manual merge

# Delete branch
git branch					# list all branches
git branch -d updates				# once branch changes are merged to current branch, old branch can be deleted
						# on deleting branches, history associated with branch is not deleted, only label updates and branch will be
						# deleted. can be checkd with git hist and git branch.

git branch					
git hist

# Demo conflict merge
## create branch "very-bad", change file and commit
## switch to master "change same file at same line and commit"
## merge "very-bad" branch to master, then automatic merge will fail to merge
git status					# when conflicts see git hist, for time line, it is nice to watch what happened
git hist
git mergetool 					# use configured mergetool to resolve merge conflict and commit the changes
git commit -m "resolve conflicts"

# creating tags, Indicating special events/milestones
## Tags are just labels can be put at any arbitraty commit point. By default if you do not specify commit id, it will be current commit or HEAD.
## if there are any changes in repo which are not committed and no commit id is specified then tag will point to HEAD and local modifications will
## not be part of tag as they are not committed.
## There are two types of tags
### light weight tags
git tag status				# creates light weight tag status
git tag --list				# list all the tags, List the tags: there is no associated information with tags
git hist				# will show tags too
git tag -d status			# delete tag status

### Annotated tags, Tags will have extra information associated with tag.
git tag -a V1.0 -m "Release 1.0"	# creates annonated tag
git tag --list				# ot git tag -l, to list tags
git hist				# no difference in this output with light weight tag
git show V1.0				# shows the git diff on this tag, as tag point to HEAD show latest commit on HEAD. This cannot be done on light weight tag	

## How to create tags on particular commitID?

# Stashing
git stash				# from master: change in git.txt, and stash it
git stash list				# to list stash
git commit -am "modify other file"	# modify other file uimage and commit to master
git stash pop				# stashed changes are merged to master and these can be committed

## Need to check, if we do changes in git.txt and stash it, now on master again do changes in git.txt 
## and commit it. Now if we pop stash what will happen?
### Did exercise and found that merge conflict will happen, we have to do manual merge using mergetool and resolve conflict and commit it.

# Time Travel with Reset and Reflog
## modify file uimage.txt and add it to staging
## after adding to staging, again modify uimage.txt
## git status show same file at staging and as well as modified
## At this stage you may want to go several commits behind and correct it, which is also regular scenario. Git has a solution for this.
git hist 				# list all the commit id
git reset <commit id> --soft		# reset HEAD to particular commit id, after executing of this command HEAD will be point to given commit id.
### 3 distinct ways of resetting
#### soft		:soft reset is least destructive of all, what it does is change where HEAD is pointing
#### default, mixed
#### hard
git reset <commit id> --mixed		# if nothing is specified, mixed is default
git reset <commit id> --hard		# most destructive
git hist				# git log: shows current state of repo
git reflog				# git reflog: shows what are all actions done on repo, nice to watch. Shows in format HEAD@

# Creating git repository @github.com
I have created empty git repository notes at github and after creating it landed into page displaying following link to newly created repo
with few commands on how to push an existing repo to this.
https://github.com/vinaib/notes.git

## create a new repository on the command line
echo "# notes" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/vinaib/notes.git
git push -u origin master

## …or push an existing repository from the command line
git remote -v							# displays remote repo connections set

git remote add origin https://github.com/vinaib/notes.git	# git remote manages all the remote connections from the local repo to another
								# remote repo.
								# git remote add: add subcommnad takes two parameters
								# name of the remote reference we want to create, in this case i want to create it
								# as origin and the second parameter is full URL to the remote repo, which is the URL to
								# my github repo. In place of origin we can use any name. By convention first and primary 
								# repo is named origin.
## after executing above command if we execute it will show
## two url's. Technically git will allow two URL's One for fetch 
## and one for push.
git remote -v						
origin	https://github.com/vinaib/notes.git (fetch)
origin	https://github.com/vinaib/notes.git (push)

# Pushing repo to github
git push -u origin master --tags				# option -u: going to setup tracking branch relationship between master branch of local repo
								# and the master branch on the remote repo.
								# after the -u parameter, we have name of remote repo that we are going to use inorder to push 
								# up the changes .
								# after the remote repo, we need to provide name of the branch we have to push up and in this case the 
								# branch we are going to use is master.
								# option --tags flag, is to send all tags we have currently in our git repo up to the git hub
							
								# after pressing enter you will be prompted for github credentials after that your local branch will
								# be pushed to github.
# output of the above command:

vinai@vinai2:~/workspace/projects/notes$ git push -u origin master --tags
Username for 'https://github.com': vinaib
Password for 'https://vinaib@github.com': 
Counting objects: 78, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (75/75), done.
Writing objects: 100% (78/78), 11.81 KiB | 0 bytes/s, done.
Total 78 (delta 39), reused 0 (delta 0)
remote: Resolving deltas: 100% (39/39), done.
To https://github.com/vinaib/notes.git
 * [new branch]      master -> master
 * [new tag]         V1.0 -> V1.0
Branch master set up to track remote branch master from origin.
				
# when you do push in future, -u is no longer required.
## Associate locally created repository with newly created repository at github.com

# clone
## clone the repo, if no-folder is specified then it is checked out at folder my-project
git clone ssh://john@example.com/path/to/my-project.git
cd my-project

## cloning to a specific folder
git clone <repo> <my_folder>

## cloning a specific tag
git clone --branch <tag> <repo>

## cloning a specific branch
git clone --branch <branch_name> git://remote_repo.git

## shallow clone
git clone -depth=1 <repo>

# Special Pointers
## HEAD: Points to last commit of current branch, can be made to point to other commits.

# Demo for very bad update: this change is going to cause merge conflict
# Demo for stash: good bad ugly
# Demo for stash: better best

# SSH based authentication
## go to your repo directory
## mkdir .ssh; cd .ssh
## ssh-keygen -r rsa -C "vinaibangala2001@gmail.com"
### this command generates public/private rsa key pair
### -t is type 
### -C is common name

# once public/private is generated, under .ssh folder id_rsa and id_rsa.pub files are created
# on linux ssh-keygen will generate above files under .ssh folder in home directory not under current 
# location. So above mkdir .ssh is irrelevant.
id_rsa is Private key
id_rsa.pub is public key
# open the id_rsa.pub file, copy the enitre contents of the file

# go to https://github.com/: Open settings under your profile. Click on SSH keys
# SSH Keys are based on your development machines. One for each machine.
# after adding public key, it can be verified by following command from your development machine
# ssh -T git@github.com
# On executing above command, it will greet by your name and say successfully authenticated, and also say
gitgub does not provide shell access



