#Repository
## Every git repo contains .git folder. This contains all information and file.
## As .git contains all info, your git repo must be as narrow as possible. Like one module as each git repo.
## git version files not folders
## commits are saved to timeline known as branch. A git repo has atleast one branch and by default that branch is called master.
## Additional branches can be created

# Minimal COnfiguration:
## User's name
## User's Email

# git on Windows
git config --global user.name "vinai"
git config --global user.email "vinaibangala2001@gmail.com"
git config --global core.editor "notepad++ -multiInst -nosession"

# p4merge as Diff tool
git config --global diff.tool p4merge
git config --global difftool.p4merge.path "c:/program Files/Perforce/p4merge.exe"
git config --global difftool.prompt false

# configure p4merge as graphical merge tool
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "c:/program Files/Perforce/p4merge.exe"
git config --global mergetool.prompt false

# below command opens above configuration in notepad++
git config --global -e

#to list all git config
git config --global -l

# try out help
git config --global --help


# Windows git
## gitBash: git-scm.com/download/win
## notepad++: http: notepad-plus-plus.com
## P4MErge: http://perforce.com

## P4mege install on linux
## extract downloaded archive
## copy extracted bin, lib folder to /opt/p4merge/
## create symlink "sudo ln -s /opt/p4merge/bin/p4merge /usr/local/bin/p4merge

# Getting Started/Creating New Repo

git init uboot
# above command creates "new empty repository with uboot folder.
# it also creates a folder
# output of command
"Intialized empty Git repository in /home/vinai/workspace/projects/uboot/.git/"

# Git states
## wworking directory:
## Staging Area
## Repository (.git folder)
## Remote repository

# adding new file/s or modified files to staging area
git add <new_file_name>		# adds the new file to staging area
git add . 			# . is wild character which adds all files under current directory
git add <modified_file>		# this command adds modified exisisting file to staging area, this can be 
				# undone by git reset HEAD

# to view status
git status

# commit files
git commit -m "first file"	# commit message.
git commit			# with out option -m, it opens configured editor to type in message
				# type in commit message in edior, save and exit.
git commit -am "updates"	# add and commit modified files with commit message.
git commit -am "new file"	# this command fails to add untracked files, -a option works only on
				# tracked files.

# list all the commits of the repo
git log 			# with all info
## oneline history, by using options for log
git log --oneline --graph --decorate --all

# show last commit and diff
git show

# list tracked files in repo
git ls-files

# undo changes from staging area
git reset HEAD <file_name>	# after this command specified file is unstaged.
				# Once file is unstaged, your modifications is not
				# deleted. It will show as modified.

# if two or more files are modified and added to staging area then we cannot 
# unstage particular one file by git reset HEAD <file_name_1>. This command 
# just returns by not doing any action. git reset HEAD will unstage all the 
# files which are staged in single command. If you want to unstage single file
# then good practice is always stage single file and you have a chance to 
# unstage that file only even though there are multiple files in staging area.

# Delete your modifications on ustaged file
git checkout -- <file_name>	# checkouts the head version, which means deletes
				# the current modification which are in file.


# Alias
## to create alias at user level 

# hist is alias for "log --oneline --graph --decorate --all"
# to use this alias, use command git hist
# to view all aliases: git config --global --list
git config --global alias.hist "log --oneline --graph --decorate --all"	

git hist -- <file_name> # history on particular file
git hist 		# history on entire repo
git hist --author=vinai # history on commits, by particular author

# Renaming tracked files
git mv ds.txt data_struct.txt		# rename given file, but changes are staged
					# not committed
git status				# shows renamed changes to be committed
git commit -m "renaming ds file" 	# renaming changes will be committed

# Remove tracked file
git rm data_struct.txt				# remove file, but this remove is staged not committed
git status					# can be viewed staged files
git commit -m "deleting data_struct.txt"	# committing deleting files

# Managing(rename, addition, deletion) files with bash commands and later update
mv commands.txt command.txt		# renaming commands.txt with bash command
touch demo.txt				# create new file demo.txt
git status				# displays commands.txt as deleted and demo as untracked file
git add -u				# stages the modifications done by updation, this option will not do 
					# new file addition. This deletes the commands.txt and moves to staged
					# This will not add command.txt, command.txt still be shown under untracked
git add -A				# will stage new files, modifications like update, rename

rm demo.txt
git add -u demo.txt			# specifying specific filename will modifies only that file, otherwise it
					# will take all modifications.


# Excluding unwanted files
# make entry in .gitignore file
.gitignore

# syntax in .gitignore, one rule per line
filename.log
*.log
*.swp

# commit this .gitignore file

# Comparing Differences
git hist					# alias to show all commits
git diff <commit id 1> <commit id 2> 		# eg: "git diff 1ff083e HEAD". HEAD is special pointer
git difftool <commit id 1> <commit id 2>	# differences are launched in configured difftool(p4merge), This command will cycle 
						# through all differences. Launches differences in separate window for each file.
						# It launches successive file differences after closing one.
git diff					# shows diff with current changes to last changes i.e. HEAD
git difftool
git diff help

# Branching
git branch					# shows current branch with highlighted green, and with asterik which denotes that it is a
						# current branch. As of now there are no other branches, it will list master as the only branch.
						# branches are just timelines, once branch changes are merged to master you do not need those branches
## Creating branch and switch to
git checkout -b updates				# option -b: creates new branch with name "updates" and switch to it. Current changes will be
						# carried forward to branch

git branch					# at this point two branches are there, this command will list both master and updates. But now
						# updates is highlighted in green with asterik: denotes that this is active branch
						# now commits will be reflected to branch. HEAD is on Branch updates

git hist					# checkout all history, shows even branching information.
git diff master updates				# diff between branches

# switch to other branch
git checkout <branch name>			# switch to given branch name
git checkout master				# switch to master branch. Please note that before switching to other branch all current changes 
						# must be committed else git will not allow to switch to branch
git hist					# HEAD is now on master, can be viewed by git hist

# Merge from branch
git merge <branch_name_2>			# If now you are on <branch_name_1> you want merge changes from <branch_name_2>, this is command
git merge updates				# in this example, if current branch is master, then all changes from updates are merged and committed
						# to master. If changes are simple merge will happen smoothly i.e. "Fast Forward" merge.

## Fast forward merge
## Automatic merge
## Manual merge

# Delete branch
git branch					# list all branches
git branch -d updates				# once branch changes are merged to current branch, old branch can be deleted
						# on deleting branches, history associated with branch is not deleted, only label updates and branch will be
						# deleted. can be checkd with git hist and git branch.

git branch					
git hist

# Special Pointers
## HEAD: Points to last commit of current branch, can be made to point to other commits.

